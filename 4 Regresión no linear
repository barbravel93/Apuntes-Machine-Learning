# El primer paso será importar las bibliotecas necesarias
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

#Para poder contrastar posteriormente cómo difiere el código de una función linear y una no linear, tracemos una del primer tipo:
x = np.arange(-5.0, 5.0, 0.1)
y = 2*(x) + 3
y_noise = 2 * np.random.normal(size=x.size)
ydata = y + y_noise
#plt.figure(figsize=(8,6))
plt.plot(x, ydata,  'bo')
plt.plot(x,y, 'r') 
plt.ylabel('Dependent Variable')
plt.xlabel('Independent Variable')
plt.show()

# Dado que las relaciones no lineales pueden tener formas variopintas, veamos algunos ejemplos introductorios.
    #Ejemplo 1: Trazar el gráfico de una función cúbica
    x = np.arange(-5.0, 5.0, 0.1)
    y = 1*(x**3) + 1*(x**2) + 1*x + 3
    y_noise = 20 * np.random.normal(size=x.size)
    ydata = y + y_noise
    plt.plot(x, ydata,  'bo')
    plt.plot(x,y, 'r') 
    plt.ylabel('Dependent Variable')
    plt.xlabel('Independent Variable')
    plt.show()
    
    #Ejemplo 2: Función cuadrática
    x = np.arange(-5.0, 5.0, 0.1)
    y = np.power(x,2)
    y_noise = 2 * np.random.normal(size=x.size)
    ydata = y + y_noise
    plt.plot(x, ydata,  'bo')
    plt.plot(x,y, 'r') 
    plt.ylabel('Dependent Variable')
    plt.xlabel('Independent Variable')
    plt.show()
    
    #Ejemplo 3: Exponencial
    X = np.arange(-5.0, 5.0, 0.1)
    Y= np.exp(X)
    plt.plot(X,Y) 
    plt.ylabel('Dependent Variable')
    plt.xlabel('Independent Variable')
    plt.show()
    
    #Ejemplo 4: Logarítmica
    X = np.arange(-5.0, 5.0, 0.1)
    Y = np.log(X)
    plt.plot(X,Y) 
    plt.ylabel('Dependent Variable')
    plt.xlabel('Independent Variable')
    plt.show()
    
    #Ejemplo 5: Sigmoidal o logística
    X = np.arange(-5.0, 5.0, 0.1)
    Y = 1-4/(1+np.power(3, X-2))
    plt.plot(X,Y)  
    plt.ylabel('Dependent Variable')
    plt.xlabel('Independent Variable')
    plt.show()
    
# Ahora veamos un ejemplo con set de datos real que nos ilustre cómo resolver una relación de este tipo en el mundo real
#El primer paso va a ser, como siempre, importar los paquetes requeridos, descargar los datos que vamos a usar, dataframearlos y echarles un primer vistazo
  import numpy as np
  import pandas as pd

  #downloading dataset
  !wget -nv -O china_gdp.csv https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-ML0101EN-SkillsNetwork/labs/Module%202/data/china_gdp.csv
    
  df = pd.read_csv("china_gdp.csv")
  df.head(10)
  
#Hecho esto, seleccionamos las variables que pensamos que guardan algún tipo de relación y trazamos la gráfica para intuir cuál es la relación que subyace. En este ejemplo, \
    \, se apreciará que es un tipo de relación logística.
plt.figure(figsize=(8,5))
x_data, y_data = (df["Year"].values, df["Value"].values)
plt.plot(x_data, y_data, 'ro')
plt.ylabel('GDP')
plt.xlabel('Year')
plt.show()

#Una vez hemos determinado el tipo de relación existente, es momento de construir el modelo
    def sigmoid(x, Beta_1, Beta_2):
    y = 1 / (1 + np.exp(-Beta_1*(x-Beta_2)))
    return y

    beta_1 = 0.10
    beta_2 = 1990.0

    #logistic function
    Y_pred = sigmoid(x_data, beta_1 , beta_2)

    #plot initial prediction against datapoints
    plt.plot(x_data, Y_pred*15000000000000.)
    plt.plot(x_data, y_data, 'ro')

#Vemos en este trazo que el encaje no es muy bueno. El motivo es que era un ejemplo en el que hemos dado unos valores aleatorios a beta_1 y beta_2. Calculemos su valor correcto!

#Nuestra primera misión es encontrar los mejores parámetros para nuestro modelo. Para ello debemos normalizar X e Y
xdata =x_data/max(x_data)
ydata =y_data/max(y_data)

#A continuación utilizaremos la función curve_fit(), la cual lleva a cabo una operación semejante a la función least_square() pero ahora aplicada a relaciones no lineales
from scipy.optimize import curve_fit
popt, pcov = curve_fit(sigmoid, xdata, ydata)
#print the final parameters
print(" beta_1 = %f, beta_2 = %f" % (popt[0], popt[1]))
 #[OUT]:  beta_1 = 690.451715, beta_2 = 0.997207
 
# Ahora que conocemos beta_1 y beta_2, es momento de trazar nuestro modelo
x = np.linspace(1960, 2015, 55)
x = x/max(x)
plt.figure(figsize=(8,5))
y = sigmoid(x, *popt)
plt.plot(xdata, ydata, 'ro', label='data')
plt.plot(x,y, linewidth=3.0, label='fit')
plt.legend(loc='best')
plt.ylabel('GDP')
plt.xlabel('Year')
plt.show()

#Hecho esto, es tiempo de calcular la precisión del modelo

